/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/
import React, {useRef} from 'react'
import {useLoader} from 'react-three-fiber'
import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader'

function Watch(props) {
    const group = useRef()
    const {nodes, materials} = useLoader(GLTFLoader, 'models/watch_multicolor.glb')

    let output

    if (props.color === 'black') {
        output = (
            <group ref={group} {...props} dispose={null}>
                <mesh material={materials.black_band} geometry={nodes.strap.geometry} />
                <mesh material={materials.black_watch} geometry={nodes.body.geometry} />
                <mesh material={materials.black_watch} geometry={nodes.rim.geometry} />
                <mesh material={materials.black_metal} geometry={nodes.dial.geometry} />
                <mesh material={materials.black_metal} geometry={nodes.bars.geometry} />
                <mesh material={materials.black_metal} geometry={nodes.buckle.geometry} />
                <mesh material={materials.black_face} geometry={nodes.face.geometry} />
                <mesh material={materials.black_hands} geometry={nodes.hands.geometry} />
                <mesh
                    material={materials.black_hands}
                    geometry={nodes.numbers.geometry}
                    scale={[0.02, 0.06, 0.01]}
                />
            </group>
        )
    } else if (props.color === 'white') {
        output = (
            <group ref={group} {...props} dispose={null}>
                <mesh material={materials.white_band} geometry={nodes.strap.geometry} />
                <mesh material={materials.white_watch} geometry={nodes.body.geometry} />
                <mesh material={materials.white_watch} geometry={nodes.rim.geometry} />
                <mesh material={materials.white_metal} geometry={nodes.dial.geometry} />
                <mesh material={materials.white_metal} geometry={nodes.bars.geometry} />
                <mesh material={materials.white_metal} geometry={nodes.buckle.geometry} />
                <mesh material={materials.white_face} geometry={nodes.face.geometry} />
                <mesh material={materials.white_hands} geometry={nodes.hands.geometry} />
                <mesh
                    material={materials.white_hands}
                    geometry={nodes.numbers.geometry}
                    scale={[0.02, 0.06, 0.01]}
                />
            </group>
        )
    } else if (props.color === 'orange') {
        output = (
            <group ref={group} {...props} dispose={null}>
                <mesh material={materials.orange_band} geometry={nodes.strap.geometry} />
                <mesh material={materials.orange_watch} geometry={nodes.body.geometry} />
                <mesh material={materials.orange_watch} geometry={nodes.rim.geometry} />
                <mesh material={materials.orange_metal} geometry={nodes.dial.geometry} />
                <mesh material={materials.orange_metal} geometry={nodes.bars.geometry} />
                <mesh
                    material={materials.orange_metal}
                    geometry={nodes.buckle.geometry}
                />
                <mesh material={materials.orange_face} geometry={nodes.face.geometry} />
                <mesh material={materials.orange_hands} geometry={nodes.hands.geometry} />
                <mesh
                    material={materials.orange_hands}
                    geometry={nodes.numbers.geometry}
                    scale={[0.02, 0.06, 0.01]}
                />
            </group>
        )
    }

    return output
}

export default Watch
